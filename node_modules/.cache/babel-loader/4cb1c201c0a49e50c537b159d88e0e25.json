{"ast":null,"code":"import { types } from \"../store/types\";\nimport { put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"https://6b9fd4cb-1517-4540-b7ad-63a9ff6818ad.mock.pstmn.io/api/v1/investments\";\naxios.defaults.headers.post[\"Content-Type\"] = `application/json`;\n\nfunction* fetchAllMutualFunds(func) {\n  try {\n    yield put({\n      type: types.FETCHING_DATA\n    });\n    let response = yield call(() => fetchData(\"/m\"));\n\n    if (response.status === 200) {\n      yield put({\n        type: types.GET_ALL_MUTUAL_FUNDS,\n        payload: response.mutual_funds\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: types.DATA_FETCH_ERROR_MESSAGE,\n      payload: error.message\n    });\n  }\n}\n\nasync function fetchData(endpoint) {\n  let res = await axios.get(endpoint);\n  return { ...res.data,\n    status: res.status\n  };\n}\n\nfunction* fetchAllEtfs(func) {\n  try {\n    yield put({\n      type: types.FETCHING_DATA\n    });\n    let response = yield call(() => fetchData(\"/etf\"));\n\n    if (response.status === 200) {\n      yield put({\n        type: types.GET_ALL_ETF,\n        payload: response.etf\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: types.DATA_FETCH_ERROR_MESSAGE,\n      payload: error.message\n    });\n  }\n}\n\nexport function* watchRequests() {\n  yield takeLatest(types.FETCH_ALL_MUTUAL_FUNDS, fetchAllMutualFunds);\n  yield takeLatest(types.FETCH_ALL_ETF, fetchAllEtfs);\n}","map":{"version":3,"sources":["/home/sanjib/Documents/altcampus/dashboard/src/saga/saga.js"],"names":["types","put","takeLatest","call","axios","defaults","baseURL","headers","post","fetchAllMutualFunds","func","type","FETCHING_DATA","response","fetchData","status","GET_ALL_MUTUAL_FUNDS","payload","mutual_funds","error","DATA_FETCH_ERROR_MESSAGE","message","endpoint","res","get","data","fetchAllEtfs","GET_ALL_ETF","etf","watchRequests","FETCH_ALL_MUTUAL_FUNDS","FETCH_ALL_ETF"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,QAAsC,oBAAtC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GACE,+EADF;AAEAF,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA+C,kBAA/C;;AAEA,UAAUC,mBAAV,CAA8BC,IAA9B,EAAoC;AAClC,MAAI;AACF,UAAMT,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEX,KAAK,CAACY;AAAd,KAAD,CAAT;AACA,QAAIC,QAAQ,GAAG,MAAMV,IAAI,CAAC,MAAMW,SAAS,CAAC,IAAD,CAAhB,CAAzB;;AAEA,QAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMd,GAAG,CAAC;AACRU,QAAAA,IAAI,EAAEX,KAAK,CAACgB,oBADJ;AAERC,QAAAA,OAAO,EAAEJ,QAAQ,CAACK;AAFV,OAAD,CAAT;AAID;AACF,GAVD,CAUE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEX,KAAK,CAACoB,wBADJ;AAERH,MAAAA,OAAO,EAAEE,KAAK,CAACE;AAFP,KAAD,CAAT;AAID;AACF;;AAED,eAAeP,SAAf,CAAyBQ,QAAzB,EAAmC;AACjC,MAAIC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUF,QAAV,CAAhB;AAEA,SAAO,EAAE,GAAGC,GAAG,CAACE,IAAT;AAAeV,IAAAA,MAAM,EAAEQ,GAAG,CAACR;AAA3B,GAAP;AACD;;AAED,UAAUW,YAAV,CAAuBhB,IAAvB,EAA6B;AAC3B,MAAI;AACF,UAAMT,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEX,KAAK,CAACY;AAAd,KAAD,CAAT;AACA,QAAIC,QAAQ,GAAG,MAAMV,IAAI,CAAC,MAAMW,SAAS,CAAC,MAAD,CAAhB,CAAzB;;AAEA,QAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMd,GAAG,CAAC;AAAEU,QAAAA,IAAI,EAAEX,KAAK,CAAC2B,WAAd;AAA2BV,QAAAA,OAAO,EAAEJ,QAAQ,CAACe;AAA7C,OAAD,CAAT;AACD;AACF,GAPD,CAOE,OAAOT,KAAP,EAAc;AACd,UAAMlB,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEX,KAAK,CAACoB,wBADJ;AAERH,MAAAA,OAAO,EAAEE,KAAK,CAACE;AAFP,KAAD,CAAT;AAID;AACF;;AAED,OAAO,UAAUQ,aAAV,GAA0B;AAE/B,QAAM3B,UAAU,CAACF,KAAK,CAAC8B,sBAAP,EAA+BrB,mBAA/B,CAAhB;AACA,QAAMP,UAAU,CAACF,KAAK,CAAC+B,aAAP,EAAsBL,YAAtB,CAAhB;AACD","sourcesContent":["import { types } from \"../store/types\";\nimport { put, takeLatest, call } from \"redux-saga/effects\";\n\nimport axios from \"axios\";\n\naxios.defaults.baseURL =\n  \"https://6b9fd4cb-1517-4540-b7ad-63a9ff6818ad.mock.pstmn.io/api/v1/investments\";\naxios.defaults.headers.post[\"Content-Type\"] = `application/json`;\n\nfunction* fetchAllMutualFunds(func) {\n  try {\n    yield put({ type: types.FETCHING_DATA });\n    let response = yield call(() => fetchData(\"/m\"));\n    \n    if (response.status === 200) {\n      yield put({\n        type: types.GET_ALL_MUTUAL_FUNDS,\n        payload: response.mutual_funds,\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: types.DATA_FETCH_ERROR_MESSAGE,\n      payload: error.message,\n    });\n  }\n}\n\nasync function fetchData(endpoint) {\n  let res = await axios.get(endpoint);\n  \n  return { ...res.data, status: res.status };\n}\n\nfunction* fetchAllEtfs(func) {\n  try {\n    yield put({ type: types.FETCHING_DATA });\n    let response = yield call(() => fetchData(\"/etf\"));\n\n    if (response.status === 200) {\n      yield put({ type: types.GET_ALL_ETF, payload: response.etf });\n    }\n  } catch (error) {\n    yield put({\n      type: types.DATA_FETCH_ERROR_MESSAGE,\n      payload: error.message,\n    });\n  }\n}\n\nexport function* watchRequests() {\n \n  yield takeLatest(types.FETCH_ALL_MUTUAL_FUNDS, fetchAllMutualFunds);\n  yield takeLatest(types.FETCH_ALL_ETF, fetchAllEtfs);\n}\n"]},"metadata":{},"sourceType":"module"}