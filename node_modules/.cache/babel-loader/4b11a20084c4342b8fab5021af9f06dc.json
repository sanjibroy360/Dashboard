{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { CategoryAngleAxis } from \"./CategoryAngleAxis\";\n/**\n * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.\n*\n* `IgrCategoryAngleAxis` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories\n*\n* ```ts\n* <IgrDataChart\n* \tref={this.onChartRef}\n* \tdataSource={this.state.dataSource}\n* \twidth=\"100%\"\n* \theight=\"100%\" >\n*\n*     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" />\n*     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n*\n* </IgrDataChart>\n* ```\n*/\n\nvar IgrCategoryAngleAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrCategoryAngleAxis, _super);\n\n  function IgrCategoryAngleAxis(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._actualIntervalChange = null;\n    _this._actualIntervalChange_wrapped = null;\n    return _this;\n  }\n\n  IgrCategoryAngleAxis.prototype.createImplementation = function () {\n    return new CategoryAngleAxis();\n  };\n\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"isAngular\", {\n    /**\n     * Checks if the axis is of angular type\n    */\n    get: function () {\n      return this.i.b2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"startAngleOffset\", {\n    /**\n     * Indicates the angle in degress that the chart's 0th angle should be offset.\n    *\n    * Indicates the angle in degress that the chart's 0th angle should be offset.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}   >\n    *\n    *     <IgrCategoryAngleAxis name=\"angleAxis\" startAngleOffset ={30} />\n    *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n    *\n    * </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.lp;\n    },\n    set: function (v) {\n      this.i.lp = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"interval\", {\n    /**\n     * Gets or sets the frequency of displayed labels.\n     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\n    *\n    * Gets or sets the frequency of displayed labels.The set value is a factor that determines which labels will be hidden.\n    * For example, an interval of 2 will display every other label.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}   >\n    *\n    *     <IgrCategoryAngleAxis name=\"angleAxis\" interval ={2} />\n    *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n    *\n    * </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.lm;\n    },\n    set: function (v) {\n      this.i.lm = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"actualInterval\", {\n    /**\n     * Gets the effective value for the current Interval.\n    *\n    * Gets the effective value for the current Interval.\n    *\n    * ```ts\n    *\n    * \t<IgrDataChart\n    * \tref={this.onChartRef}\n    * \tdataSource={this.state.dataSource}\n    * \twidth=\"100%\"\n    * \theight=\"100%\" >\n    *\n    *     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" actualInterval={5} />\n    *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n    *\n    * </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.lg;\n    },\n    set: function (v) {\n      this.i.lg = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"minorInterval\", {\n    /**\n     * Gets or sets the frequency of displayed minor lines.\n     * The set value is a factor that determines how the minor lines will be displayed.\n    *\n    * Gets or sets the frequency of displayed minor lines. The set value is a factor that determines how the minor lines will be displayed.\n    *\n    * ```ts\n    *    <IgrDataChart\n    * \tref={this.onChartRef}\n    * \tdataSource={this.state.dataSource}\n    * \twidth=\"100%\"\n    * \theight=\"100%\" >\n    *\n    *     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" minorInterval={5} />\n    *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n    *\n    * </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ln;\n    },\n    set: function (v) {\n      this.i.ln = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"actualMinorInterval\", {\n    /**\n     * Gets the effective value for the current MinorInterval.\n    *\n    * Get the effective value for the current minorInterval.\n    *\n    * ```ts\n    *    <IgrDataChart\n    * \tref={this.onChartRef}\n    * \tdataSource={this.state.dataSource}\n    * \twidth=\"100%\"\n    * \theight=\"100%\" >\n    *\n    *     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" actualMinorInterval={5} />\n    *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n    *\n    * </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.lh;\n    },\n    set: function (v) {\n      this.i.lh = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Gets the scaled angle in radians from the raw axis value.\n  \r\n  * @param unscaledAngle  * The raw axis value.\n  */\n\n  IgrCategoryAngleAxis.prototype.getScaledAngle = function (unscaledAngle) {\n    var iv = this.i.getScaledAngle(unscaledAngle);\n    return iv;\n  };\n  /**\n   * Gets the raw axis value from the scaled angle in radians.\n  \r\n  */\n\n\n  IgrCategoryAngleAxis.prototype.getUnscaledAngle = function (scaledAngle) {\n    var iv = this.i.getUnscaledAngle(scaledAngle);\n    return iv;\n  };\n\n  Object.defineProperty(IgrCategoryAngleAxis.prototype, \"actualIntervalChange\", {\n    get: function () {\n      return this._actualIntervalChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualIntervalChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n        this._actualIntervalChange_wrapped = null;\n        this._actualIntervalChange = null;\n      }\n\n      this._actualIntervalChange = ev;\n\n      this._actualIntervalChange_wrapped = function (o, e) {\n        var ext = _this.actualInterval;\n\n        if (_this.beforeActualIntervalChange) {\n          _this.beforeActualIntervalChange(_this, ext);\n        }\n\n        if (_this._actualIntervalChange) {\n          _this._actualIntervalChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrCategoryAngleAxis;\n}(IgrCategoryAxisBase);\n\nexport { IgrCategoryAngleAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-category-angle-axis.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { CategoryAngleAxis } from \"./CategoryAngleAxis\";\n/**\n * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.\n*\n* `IgrCategoryAngleAxis` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories\n*\n* ```ts\n* <IgrDataChart\n* \tref={this.onChartRef}\n* \tdataSource={this.state.dataSource}\n* \twidth=\"100%\"\n* \theight=\"100%\" >\n*\n*     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" />\n*     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n*\n* </IgrDataChart>\n* ```\n*/\nvar IgrCategoryAngleAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrCategoryAngleAxis, _super);\n    function IgrCategoryAngleAxis(props) {\n        var _this = _super.call(this, props) || this;\n        _this._actualIntervalChange = null;\n        _this._actualIntervalChange_wrapped = null;\n        return _this;\n    }\n    IgrCategoryAngleAxis.prototype.createImplementation = function () {\n        return new CategoryAngleAxis();\n    };\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"isAngular\", {\n        /**\n         * Checks if the axis is of angular type\n        */\n        get: function () {\n            return this.i.b2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"startAngleOffset\", {\n        /**\n         * Indicates the angle in degress that the chart's 0th angle should be offset.\n        *\n        * Indicates the angle in degress that the chart's 0th angle should be offset.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}   >\n        *\n        *     <IgrCategoryAngleAxis name=\"angleAxis\" startAngleOffset ={30} />\n        *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n        *\n        * </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.lp;\n        },\n        set: function (v) {\n            this.i.lp = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"interval\", {\n        /**\n         * Gets or sets the frequency of displayed labels.\n         * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\n        *\n        * Gets or sets the frequency of displayed labels.The set value is a factor that determines which labels will be hidden.\n        * For example, an interval of 2 will display every other label.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}   >\n        *\n        *     <IgrCategoryAngleAxis name=\"angleAxis\" interval ={2} />\n        *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n        *\n        * </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.lm;\n        },\n        set: function (v) {\n            this.i.lm = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"actualInterval\", {\n        /**\n         * Gets the effective value for the current Interval.\n        *\n        * Gets the effective value for the current Interval.\n        *\n        * ```ts\n        *\n        * \t<IgrDataChart\n        * \tref={this.onChartRef}\n        * \tdataSource={this.state.dataSource}\n        * \twidth=\"100%\"\n        * \theight=\"100%\" >\n        *\n        *     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" actualInterval={5} />\n        *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n        *\n        * </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.lg;\n        },\n        set: function (v) {\n            this.i.lg = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"minorInterval\", {\n        /**\n         * Gets or sets the frequency of displayed minor lines.\n         * The set value is a factor that determines how the minor lines will be displayed.\n        *\n        * Gets or sets the frequency of displayed minor lines. The set value is a factor that determines how the minor lines will be displayed.\n        *\n        * ```ts\n        *    <IgrDataChart\n        * \tref={this.onChartRef}\n        * \tdataSource={this.state.dataSource}\n        * \twidth=\"100%\"\n        * \theight=\"100%\" >\n        *\n        *     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" minorInterval={5} />\n        *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n        *\n        * </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ln;\n        },\n        set: function (v) {\n            this.i.ln = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"actualMinorInterval\", {\n        /**\n         * Gets the effective value for the current MinorInterval.\n        *\n        * Get the effective value for the current minorInterval.\n        *\n        * ```ts\n        *    <IgrDataChart\n        * \tref={this.onChartRef}\n        * \tdataSource={this.state.dataSource}\n        * \twidth=\"100%\"\n        * \theight=\"100%\" >\n        *\n        *     <IgrCategoryAngleAxis name=\"angleAxis\" label=\"Department\" actualMinorInterval={5} />\n        *     <IgrNumericRadiusAxis name=\"radiusAxis\" />\n        *\n        * </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.lh;\n        },\n        set: function (v) {\n            this.i.lh = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets the scaled angle in radians from the raw axis value.\n    \r\n    * @param unscaledAngle  * The raw axis value.\n    */\n    IgrCategoryAngleAxis.prototype.getScaledAngle = function (unscaledAngle) {\n        var iv = this.i.getScaledAngle(unscaledAngle);\n        return (iv);\n    };\n    /**\n     * Gets the raw axis value from the scaled angle in radians.\n    \r\n    */\n    IgrCategoryAngleAxis.prototype.getUnscaledAngle = function (scaledAngle) {\n        var iv = this.i.getUnscaledAngle(scaledAngle);\n        return (iv);\n    };\n    Object.defineProperty(IgrCategoryAngleAxis.prototype, \"actualIntervalChange\", {\n        get: function () {\n            return this._actualIntervalChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualIntervalChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n                this._actualIntervalChange_wrapped = null;\n                this._actualIntervalChange = null;\n            }\n            this._actualIntervalChange = ev;\n            this._actualIntervalChange_wrapped = function (o, e) {\n                var ext = _this.actualInterval;\n                if (_this.beforeActualIntervalChange) {\n                    _this.beforeActualIntervalChange(_this, ext);\n                }\n                if (_this._actualIntervalChange) {\n                    _this._actualIntervalChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrCategoryAngleAxis;\n}(IgrCategoryAxisBase));\nexport { IgrCategoryAngleAxis };\n//# sourceMappingURL=igr-category-angle-axis.js.map\n"]},"metadata":{},"sourceType":"module"}