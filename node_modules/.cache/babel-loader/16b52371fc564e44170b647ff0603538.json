{"ast":null,"code":"import { types } from \"../store/types\";\nimport { put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"https://8dd5cd27-a5cb-4244-b2b5-0ed958f59494.mock.pstmn.io/api/v1/investments\";\naxios.defaults.headers.post[\"Content-Type\"] = `application/json`;\n\nfunction* fetchAllMutualFunds(func) {\n  try {\n    yield put({\n      type: types.FETCHING_DATA\n    });\n    let response = yield call(() => fetchData(\"/m\"));\n    co;\n\n    if (response.status === \"200\") {\n      yield put({\n        type: types.GET_ALL_ETF,\n        payload: response.mutual_funds\n      });\n    } else {\n      yield put({\n        type: types.DATA_FETCH_ERROR_MESSAGE,\n        payload: \"Something went wrong.\"\n      });\n    }\n\n    console.log(response.mutual_funds, response);\n  } catch (error) {}\n}\n\nasync function fetchData(endpoint) {\n  let res = await axios.get(endpoint);\n  return { ...res.data,\n    status: res.status\n  };\n}\n\nfunction* fetchAllEtfs(func) {\n  yield put({\n    type: types.FETCHING_DATA\n  });\n  let response = yield call(() => fetchData(\"/etf\"));\n\n  if (response.status === \"200\") {\n    yield put({\n      type: types.GET_ALL_ETF,\n      payload: response.etf\n    });\n  } else {\n    yield put({\n      type: types.DATA_FETCH_ERROR_MESSAGE,\n      payload: \"Something went wrong.\"\n    });\n  }\n\n  console.log(response.etf, response);\n}\n\nexport function* watchRequirements() {\n  console.log(\"watcher\");\n  yield takeLatest(types.FETCH_ALL_MUTUAL_FUNDS, fetchAllMutualFunds);\n  yield takeLatest(types.FETCH_ALL_ETF, fetchAllEtfs);\n}","map":{"version":3,"sources":["/home/sanjib/Documents/altcampus/dashboard/src/saga/saga.js"],"names":["types","put","takeLatest","call","axios","defaults","baseURL","headers","post","fetchAllMutualFunds","func","type","FETCHING_DATA","response","fetchData","co","status","GET_ALL_ETF","payload","mutual_funds","DATA_FETCH_ERROR_MESSAGE","console","log","error","endpoint","res","get","data","fetchAllEtfs","etf","watchRequirements","FETCH_ALL_MUTUAL_FUNDS","FETCH_ALL_ETF"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,QAAsC,oBAAtC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GACE,+EADF;AAEAF,KAAK,CAACC,QAAN,CAAeE,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA+C,kBAA/C;;AAEA,UAAUC,mBAAV,CAA8BC,IAA9B,EAAoC;AAClC,MAAI;AACF,UAAMT,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEX,KAAK,CAACY;AAAd,KAAD,CAAT;AACA,QAAIC,QAAQ,GAAG,MAAMV,IAAI,CAAC,MAAMW,SAAS,CAAC,IAAD,CAAhB,CAAzB;AACAC,IAAAA,EAAE;;AACF,QAAIF,QAAQ,CAACG,MAAT,KAAoB,KAAxB,EAA+B;AAC7B,YAAMf,GAAG,CAAC;AAAEU,QAAAA,IAAI,EAAEX,KAAK,CAACiB,WAAd;AAA2BC,QAAAA,OAAO,EAAEL,QAAQ,CAACM;AAA7C,OAAD,CAAT;AACD,KAFD,MAEO;AACL,YAAMlB,GAAG,CAAC;AACRU,QAAAA,IAAI,EAAEX,KAAK,CAACoB,wBADJ;AAERF,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAT;AAID;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAACM,YAArB,EAAmCN,QAAnC;AACD,GAbD,CAaE,OAAOU,KAAP,EAAc,CAAE;AACnB;;AAED,eAAeT,SAAf,CAAyBU,QAAzB,EAAmC;AACjC,MAAIC,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAUF,QAAV,CAAhB;AACA,SAAO,EAAE,GAAGC,GAAG,CAACE,IAAT;AAAeX,IAAAA,MAAM,EAAES,GAAG,CAACT;AAA3B,GAAP;AACD;;AAED,UAAUY,YAAV,CAAuBlB,IAAvB,EAA6B;AAC3B,QAAMT,GAAG,CAAC;AAAEU,IAAAA,IAAI,EAAEX,KAAK,CAACY;AAAd,GAAD,CAAT;AACA,MAAIC,QAAQ,GAAG,MAAMV,IAAI,CAAC,MAAMW,SAAS,CAAC,MAAD,CAAhB,CAAzB;;AAEA,MAAID,QAAQ,CAACG,MAAT,KAAoB,KAAxB,EAA+B;AAC7B,UAAMf,GAAG,CAAC;AAAEU,MAAAA,IAAI,EAAEX,KAAK,CAACiB,WAAd;AAA2BC,MAAAA,OAAO,EAAEL,QAAQ,CAACgB;AAA7C,KAAD,CAAT;AACD,GAFD,MAEO;AACL,UAAM5B,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEX,KAAK,CAACoB,wBADJ;AAERF,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAT;AAID;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAACgB,GAArB,EAA0BhB,QAA1B;AACD;;AAED,OAAO,UAAUiB,iBAAV,GAA8B;AACnCT,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAMpB,UAAU,CAACF,KAAK,CAAC+B,sBAAP,EAA+BtB,mBAA/B,CAAhB;AACA,QAAMP,UAAU,CAACF,KAAK,CAACgC,aAAP,EAAsBJ,YAAtB,CAAhB;AACD","sourcesContent":["import { types } from \"../store/types\";\nimport { put, takeLatest, call } from \"redux-saga/effects\";\n\nimport axios from \"axios\";\n\naxios.defaults.baseURL =\n  \"https://8dd5cd27-a5cb-4244-b2b5-0ed958f59494.mock.pstmn.io/api/v1/investments\";\naxios.defaults.headers.post[\"Content-Type\"] = `application/json`;\n\nfunction* fetchAllMutualFunds(func) {\n  try {\n    yield put({ type: types.FETCHING_DATA });\n    let response = yield call(() => fetchData(\"/m\"));\n    co\n    if (response.status === \"200\") {\n      yield put({ type: types.GET_ALL_ETF, payload: response.mutual_funds });\n    } else {\n      yield put({\n        type: types.DATA_FETCH_ERROR_MESSAGE,\n        payload: \"Something went wrong.\",\n      });\n    }\n    console.log(response.mutual_funds, response);\n  } catch (error) {}\n}\n\nasync function fetchData(endpoint) {\n  let res = await axios.get(endpoint);\n  return { ...res.data, status: res.status };\n}\n\nfunction* fetchAllEtfs(func) {\n  yield put({ type: types.FETCHING_DATA });\n  let response = yield call(() => fetchData(\"/etf\"));\n\n  if (response.status === \"200\") {\n    yield put({ type: types.GET_ALL_ETF, payload: response.etf });\n  } else {\n    yield put({\n      type: types.DATA_FETCH_ERROR_MESSAGE,\n      payload: \"Something went wrong.\",\n    });\n  }\n  console.log(response.etf, response);\n}\n\nexport function* watchRequirements() {\n  console.log(\"watcher\");\n  yield takeLatest(types.FETCH_ALL_MUTUAL_FUNDS, fetchAllMutualFunds);\n  yield takeLatest(types.FETCH_ALL_ETF, fetchAllEtfs);\n}\n"]},"metadata":{},"sourceType":"module"}