{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNan = require('babel-runtime/core-js/number/is-nan');\n\nvar _isNan2 = _interopRequireDefault(_isNan);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Arcs = require('./Arcs');\n\nvar _Arcs2 = _interopRequireDefault(_Arcs);\n\nvar _DonutInnerText = require('./DonutInnerText');\n\nvar _DonutInnerText2 = _interopRequireDefault(_DonutInnerText);\n\nvar _Legend = require('./Legend');\n\nvar _Legend2 = _interopRequireDefault(_Legend);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Calculates the total of all the items' value,\n * using a reduce function over the items.\n * @param {} items - An array of items, each with values, at least.\n */\n\n\nfunction calculateTotal(items) {\n  return items.reduce(function (sum, currItem) {\n    return sum + currItem.value;\n  }, 0);\n}\n/**\n * @extends {Component}\n */\n\n/**\n * @fileOverview Main Donut Chart entry point.\n * Orchestrates all rendering for the chart, passing props to\n * Arcs, DonutInnerText, and Legend children components.\n * @name DonutChart.js\n * @author JJ Naughton\n * @license MIT\n */\n\n\nvar DonutChart = function (_Component) {\n  (0, _inherits3.default)(DonutChart, _Component);\n  /**\n  * Represents a DonutChart.\n  * @constructor\n  * @param {} props - Object of propTypes with defaultProps as fallback.\n  */\n\n  function DonutChart(props) {\n    (0, _classCallCheck3.default)(this, DonutChart);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (DonutChart.__proto__ || (0, _getPrototypeOf2.default)(DonutChart)).call(this, props));\n\n    var data = props.data;\n    _this.state = {\n      selected: data[0],\n      toggleSelect: false\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(DonutChart, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(newProps) {\n      var data = newProps.data; // if new data, reset\n\n      if (data && (0, _stringify2.default)(data) !== (0, _stringify2.default)(this.props.data)) {\n        this.setState({\n          selected: data[0],\n          toggleSelect: false\n        });\n      }\n    }\n    /**\n     * Handles the clicking of an ArcPath region.\n     * Toggles the selected state,\n     * effectively freezing all handlers on other, unselected items.\n     * Calls the onClick handler,\n     * passed by the user as a prop,\n     * providing the item clicked,\n     * as well as whether it's becoming selected or unselected.\n     * @param {} item - The item object selected, with a label and a value, at least.\n     */\n\n  }, {\n    key: 'handleClick',\n    value: function handleClick(item) {\n      if (this.state.selected.label === item.label) {\n        var toggle = this.props.clickToggle ? !this.state.toggleSelect : false;\n        this.setState({\n          toggleSelect: toggle,\n          selected: item\n        });\n        this.props.onClick(item, toggle);\n      }\n    }\n    /**\n     * Handles the mouseenter event over an ArcPath region.\n     * Sets the clicked item as selected in the state object.\n     * @param {} item - The item object selected, with a label and a value, at least.\n     */\n\n  }, {\n    key: 'handleMouseEnter',\n    value: function handleMouseEnter(item) {\n      if (!this.state.toggleSelect) {\n        this.setState({\n          selected: item\n        });\n        this.props.onMouseEnter(item);\n      }\n    }\n    /* React render function */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          startAngle = _props.startAngle,\n          width = _props.width,\n          height = _props.height,\n          formatValues = _props.formatValues,\n          className = _props.className,\n          data = _props.data,\n          legend = _props.legend,\n          emptyColor = _props.emptyColor,\n          strokeColor = _props.strokeColor,\n          colors = _props.colors,\n          colorFunction = _props.colorFunction,\n          innerRadius = _props.innerRadius,\n          outerRadius = _props.outerRadius,\n          emptyOffset = _props.emptyOffset,\n          selectedOffset = _props.selectedOffset,\n          toggledOffset = _props.toggledOffset;\n      var arcsClassName = className + '-arcs';\n      var innerTextClassName = className + '-innertext';\n      var legendClassName = className + '-legend';\n      var checkData = data.length ? data : [{\n        label: '',\n        value: 100,\n        isEmpty: true\n      }];\n      var total = calculateTotal(checkData);\n      var twoThirds = 2 / 3;\n      var graphWidth = legend ? width * twoThirds : width;\n      var legendWidth = width - graphWidth;\n      return _react2.default.createElement('svg', {\n        className: className,\n        width: width,\n        height: height,\n        viewBox: '0 0 ' + width + ' ' + height\n      }, _react2.default.createElement(_Arcs2.default, {\n        className: arcsClassName,\n        colors: colors,\n        data: checkData,\n        width: graphWidth,\n        emptyColor: emptyColor,\n        strokeColor: strokeColor,\n        colorFunction: colorFunction,\n        onMouseEnter: this.handleMouseEnter.bind(this),\n        onClick: this.handleClick.bind(this),\n        selected: this.state.selected,\n        startAngle: startAngle,\n        toggleSelect: this.state.toggleSelect,\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        selectedOffset: selectedOffset,\n        toggledOffset: toggledOffset,\n        emptyOffset: emptyOffset,\n        total: total\n      }), _react2.default.createElement(_DonutInnerText2.default, {\n        item: this.state.selected,\n        width: graphWidth,\n        formatValues: formatValues,\n        total: total,\n        className: innerTextClassName\n      }), legend ? _react2.default.createElement(_Legend2.default, {\n        data: checkData,\n        totalWidth: width,\n        width: legendWidth,\n        colors: colors,\n        emptyColor: emptyColor,\n        strokeColor: strokeColor,\n        colorFunction: colorFunction,\n        onMouseEnter: this.handleMouseEnter.bind(this),\n        onClick: this.handleClick.bind(this),\n        selected: this.state.selected,\n        toggleSelect: this.state.toggleSelect,\n        className: legendClassName\n      }) : null);\n    }\n  }]);\n  return DonutChart;\n}(_react.Component);\n\nexports.default = DonutChart;\nDonutChart.propTypes = {\n  data: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    value: _propTypes2.default.number.isRequired,\n    label: _propTypes2.default.string.isRequired,\n    className: _propTypes2.default.string,\n    isEmpty: _propTypes2.default.boolean\n  })).isRequired,\n  className: _propTypes2.default.string,\n  height: _propTypes2.default.number,\n  width: _propTypes2.default.number,\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  emptyColor: _propTypes2.default.string,\n  stokeColor: _propTypes2.default.string,\n  startAngle: _propTypes2.default.number,\n  colorFunction: _propTypes2.default.func,\n  innerRadius: _propTypes2.default.number,\n  outerRadius: _propTypes2.default.number,\n  selectedOffset: _propTypes2.default.number,\n  emptyOffset: _propTypes2.default.number,\n  toggledOffset: _propTypes2.default.number,\n  formatValues: _propTypes2.default.func,\n  onMouseEnter: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  legend: _propTypes2.default.bool,\n  clickToggle: _propTypes2.default.bool\n};\nDonutChart.defaultProps = {\n  data: [{\n    label: '',\n    value: 100,\n    isEmpty: true\n  }],\n  className: 'donutchart',\n  height: 500,\n  width: 750,\n  colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#795548', '#607d8b'],\n  emptyColor: '#e0e0e0',\n  strokeColor: '#212121',\n  startAngle: 0,\n  colorFunction: function colorFunction(colors, index) {\n    return colors[index % colors.length];\n  },\n  innerRadius: 0.70,\n  outerRadius: 0.90,\n  selectedOffset: 0.03,\n  emptyOffset: 0.08,\n  toggledOffset: 0.04,\n  formatValues: function formatValues(value, total) {\n    return (0, _isNan2.default)(value / total) ? '--' : (value / total * 100).toFixed(2) + '%';\n  },\n  onMouseEnter: function onMouseEnter(item) {\n    return item;\n  },\n  onClick: function onClick(item, toggled) {\n    return toggled ? item : null;\n  },\n  legend: true,\n  clickToggle: true\n};","map":{"version":3,"sources":["/home/sanjib/Documents/altcampus/dashboard/node_modules/react-donut-chart/lib/dist/DonutChart.js"],"names":["Object","defineProperty","exports","value","_isNan","require","_isNan2","_interopRequireDefault","_stringify","_stringify2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_react","_react2","_propTypes","_propTypes2","_Arcs","_Arcs2","_DonutInnerText","_DonutInnerText2","_Legend","_Legend2","obj","__esModule","default","calculateTotal","items","reduce","sum","currItem","DonutChart","_Component","props","_this","__proto__","call","data","state","selected","toggleSelect","key","componentWillReceiveProps","newProps","setState","handleClick","item","label","toggle","clickToggle","onClick","handleMouseEnter","onMouseEnter","render","_props","startAngle","width","height","formatValues","className","legend","emptyColor","strokeColor","colors","colorFunction","innerRadius","outerRadius","emptyOffset","selectedOffset","toggledOffset","arcsClassName","innerTextClassName","legendClassName","checkData","length","isEmpty","total","twoThirds","graphWidth","legendWidth","createElement","viewBox","bind","totalWidth","Component","propTypes","arrayOf","shape","number","isRequired","string","boolean","stokeColor","func","bool","defaultProps","index","toFixed","toggled"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _isNan = require('babel-runtime/core-js/number/is-nan');\n\nvar _isNan2 = _interopRequireDefault(_isNan);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Arcs = require('./Arcs');\n\nvar _Arcs2 = _interopRequireDefault(_Arcs);\n\nvar _DonutInnerText = require('./DonutInnerText');\n\nvar _DonutInnerText2 = _interopRequireDefault(_DonutInnerText);\n\nvar _Legend = require('./Legend');\n\nvar _Legend2 = _interopRequireDefault(_Legend);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calculates the total of all the items' value,\n * using a reduce function over the items.\n * @param {} items - An array of items, each with values, at least.\n */\nfunction calculateTotal(items) {\n    return items.reduce(function (sum, currItem) {\n        return sum + currItem.value;\n    }, 0);\n}\n\n/**\n * @extends {Component}\n */\n/**\n * @fileOverview Main Donut Chart entry point.\n * Orchestrates all rendering for the chart, passing props to\n * Arcs, DonutInnerText, and Legend children components.\n * @name DonutChart.js\n * @author JJ Naughton\n * @license MIT\n */\n\nvar DonutChart = function (_Component) {\n    (0, _inherits3.default)(DonutChart, _Component);\n\n    /**\n    * Represents a DonutChart.\n    * @constructor\n    * @param {} props - Object of propTypes with defaultProps as fallback.\n    */\n    function DonutChart(props) {\n        (0, _classCallCheck3.default)(this, DonutChart);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (DonutChart.__proto__ || (0, _getPrototypeOf2.default)(DonutChart)).call(this, props));\n\n        var data = props.data;\n\n\n        _this.state = {\n            selected: data[0],\n            toggleSelect: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(DonutChart, [{\n        key: 'componentWillReceiveProps',\n        value: function componentWillReceiveProps(newProps) {\n            var data = newProps.data;\n\n            // if new data, reset\n\n            if (data && (0, _stringify2.default)(data) !== (0, _stringify2.default)(this.props.data)) {\n                this.setState({\n                    selected: data[0],\n                    toggleSelect: false\n                });\n            }\n        }\n\n        /**\n         * Handles the clicking of an ArcPath region.\n         * Toggles the selected state,\n         * effectively freezing all handlers on other, unselected items.\n         * Calls the onClick handler,\n         * passed by the user as a prop,\n         * providing the item clicked,\n         * as well as whether it's becoming selected or unselected.\n         * @param {} item - The item object selected, with a label and a value, at least.\n         */\n\n    }, {\n        key: 'handleClick',\n        value: function handleClick(item) {\n            if (this.state.selected.label === item.label) {\n                var toggle = this.props.clickToggle ? !this.state.toggleSelect : false;\n                this.setState({\n                    toggleSelect: toggle,\n                    selected: item\n                });\n                this.props.onClick(item, toggle);\n            }\n        }\n\n        /**\n         * Handles the mouseenter event over an ArcPath region.\n         * Sets the clicked item as selected in the state object.\n         * @param {} item - The item object selected, with a label and a value, at least.\n         */\n\n    }, {\n        key: 'handleMouseEnter',\n        value: function handleMouseEnter(item) {\n            if (!this.state.toggleSelect) {\n                this.setState({\n                    selected: item\n                });\n                this.props.onMouseEnter(item);\n            }\n        }\n\n        /* React render function */\n\n    }, {\n        key: 'render',\n        value: function render() {\n            var _props = this.props,\n                startAngle = _props.startAngle,\n                width = _props.width,\n                height = _props.height,\n                formatValues = _props.formatValues,\n                className = _props.className,\n                data = _props.data,\n                legend = _props.legend,\n                emptyColor = _props.emptyColor,\n                strokeColor = _props.strokeColor,\n                colors = _props.colors,\n                colorFunction = _props.colorFunction,\n                innerRadius = _props.innerRadius,\n                outerRadius = _props.outerRadius,\n                emptyOffset = _props.emptyOffset,\n                selectedOffset = _props.selectedOffset,\n                toggledOffset = _props.toggledOffset;\n\n\n            var arcsClassName = className + '-arcs';\n            var innerTextClassName = className + '-innertext';\n            var legendClassName = className + '-legend';\n\n            var checkData = data.length ? data : [{\n                label: '',\n                value: 100,\n                isEmpty: true\n            }];\n\n            var total = calculateTotal(checkData);\n            var twoThirds = 2 / 3;\n            var graphWidth = legend ? width * twoThirds : width;\n            var legendWidth = width - graphWidth;\n\n            return _react2.default.createElement(\n                'svg',\n                { className: className,\n                    width: width,\n                    height: height,\n                    viewBox: '0 0 ' + width + ' ' + height },\n                _react2.default.createElement(_Arcs2.default, {\n                    className: arcsClassName,\n                    colors: colors,\n                    data: checkData,\n                    width: graphWidth,\n                    emptyColor: emptyColor,\n                    strokeColor: strokeColor,\n                    colorFunction: colorFunction,\n                    onMouseEnter: this.handleMouseEnter.bind(this),\n                    onClick: this.handleClick.bind(this),\n                    selected: this.state.selected,\n                    startAngle: startAngle,\n                    toggleSelect: this.state.toggleSelect,\n                    innerRadius: innerRadius,\n                    outerRadius: outerRadius,\n                    selectedOffset: selectedOffset,\n                    toggledOffset: toggledOffset,\n                    emptyOffset: emptyOffset,\n                    total: total }),\n                _react2.default.createElement(_DonutInnerText2.default, {\n                    item: this.state.selected,\n                    width: graphWidth,\n                    formatValues: formatValues,\n                    total: total,\n                    className: innerTextClassName }),\n                legend ? _react2.default.createElement(_Legend2.default, {\n                    data: checkData,\n                    totalWidth: width,\n                    width: legendWidth,\n                    colors: colors,\n                    emptyColor: emptyColor,\n                    strokeColor: strokeColor,\n                    colorFunction: colorFunction,\n                    onMouseEnter: this.handleMouseEnter.bind(this),\n                    onClick: this.handleClick.bind(this),\n                    selected: this.state.selected,\n                    toggleSelect: this.state.toggleSelect,\n                    className: legendClassName }) : null\n            );\n        }\n    }]);\n    return DonutChart;\n}(_react.Component);\n\nexports.default = DonutChart;\n\n\nDonutChart.propTypes = {\n    data: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n        value: _propTypes2.default.number.isRequired,\n        label: _propTypes2.default.string.isRequired,\n        className: _propTypes2.default.string,\n        isEmpty: _propTypes2.default.boolean\n    })).isRequired,\n    className: _propTypes2.default.string,\n    height: _propTypes2.default.number,\n    width: _propTypes2.default.number,\n    colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n    emptyColor: _propTypes2.default.string,\n    stokeColor: _propTypes2.default.string,\n    startAngle: _propTypes2.default.number,\n    colorFunction: _propTypes2.default.func,\n    innerRadius: _propTypes2.default.number,\n    outerRadius: _propTypes2.default.number,\n    selectedOffset: _propTypes2.default.number,\n    emptyOffset: _propTypes2.default.number,\n    toggledOffset: _propTypes2.default.number,\n    formatValues: _propTypes2.default.func,\n    onMouseEnter: _propTypes2.default.func,\n    onClick: _propTypes2.default.func,\n    legend: _propTypes2.default.bool,\n    clickToggle: _propTypes2.default.bool\n};\n\nDonutChart.defaultProps = {\n    data: [{\n        label: '',\n        value: 100,\n        isEmpty: true\n    }],\n    className: 'donutchart',\n    height: 500,\n    width: 750,\n    colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#795548', '#607d8b'],\n    emptyColor: '#e0e0e0',\n    strokeColor: '#212121',\n    startAngle: 0,\n    colorFunction: function colorFunction(colors, index) {\n        return colors[index % colors.length];\n    },\n    innerRadius: 0.70,\n    outerRadius: 0.90,\n    selectedOffset: 0.03,\n    emptyOffset: 0.08,\n    toggledOffset: 0.04,\n    formatValues: function formatValues(value, total) {\n        return (0, _isNan2.default)(value / total) ? '--' : (value / total * 100).toFixed(2) + '%';\n    },\n    onMouseEnter: function onMouseEnter(item) {\n        return item;\n    },\n    onClick: function onClick(item, toggled) {\n        return toggled ? item : null;\n    },\n    legend: true,\n    clickToggle: true\n};"]},"metadata":{},"sourceType":"script"}