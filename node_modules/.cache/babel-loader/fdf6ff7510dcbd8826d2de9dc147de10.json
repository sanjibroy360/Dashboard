{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { CategoryXAxis } from \"./CategoryXAxis\";\n/**\n * Represents a IgxDataChartComponent category X axis.\n*\n* `IgrCategoryXAxis` class represents a IgxDataChartComponent category X axis.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrLineSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrLineSeries({ name: \"Series1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrCategoryXAxis =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  tslib_1.__extends(IgrCategoryXAxis, _super);\n\n  function IgrCategoryXAxis(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._actualIntervalChange = null;\n    _this._actualIntervalChange_wrapped = null;\n    _this._actualMinorIntervalChange = null;\n    _this._actualMinorIntervalChange_wrapped = null;\n    return _this;\n  }\n\n  IgrCategoryXAxis.prototype.createImplementation = function () {\n    return new CategoryXAxis();\n  };\n\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"interval\", {\n    /**\n     * Gets or sets the frequency of displayed labels.\n     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\n    *\n    * `interval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" interval=\"3\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrLineSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\"/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ld;\n    },\n    set: function (v) {\n      this.i.ld = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"actualInterval\", {\n    /**\n     * Gets the effective value for the current Interval.\n    *\n    * ```ts\n    * let effectiveInterval: number = xAxis.actualInterval;\n    * ```\n    */\n    get: function () {\n      return this.i.k8;\n    },\n    set: function (v) {\n      this.i.k8 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"minorInterval\", {\n    /**\n     * Gets or sets the frequency of displayed minor lines.\n     * The set value is a factor that determines how the minor lines will be displayed.\n    *\n    * `minorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.\n    *\n    * `minorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `minorInterval` to 0.1.\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\"\n    * \t\tminorInterval={0.1}\n    * \t\tminorStroke=\"green\"\n    * \t\tminorStrokeThickness={1} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrLineSeries\n    * \t\tname=\"series1\"\n    * \t\txAxisName=\"xAxis\"\n    * \t\tyAxisName=\"yAxis\"\n    * \t\tvalueMemberPath=\"value\"/>\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.le;\n    },\n    set: function (v) {\n      this.i.le = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"actualMinorInterval\", {\n    /**\n     * Gets the effective value for the current MinorInterval.\n    *\n    * ```ts\n    * let effectiveMinorInterval: number = xAxis.actualMinorInterval;\n    * ```\n    */\n    get: function () {\n      return this.i.k9;\n    },\n    set: function (v) {\n      this.i.k9 = +v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Scrolls the specified item into view.\n  \r\n  * @param item  * Data item to scroll into view\n  */\n\n  IgrCategoryXAxis.prototype.scrollIntoView = function (item) {\n    this.i.ln(item);\n  };\n\n  IgrCategoryXAxis.prototype.scrollRangeIntoView = function (minimum, maximum) {\n    this.i.lo(minimum, maximum);\n  };\n\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"actualIntervalChange\", {\n    get: function () {\n      return this._actualIntervalChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualIntervalChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n        this._actualIntervalChange_wrapped = null;\n        this._actualIntervalChange = null;\n      }\n\n      this._actualIntervalChange = ev;\n\n      this._actualIntervalChange_wrapped = function (o, e) {\n        var ext = _this.actualInterval;\n\n        if (_this.beforeActualIntervalChange) {\n          _this.beforeActualIntervalChange(_this, ext);\n        }\n\n        if (_this._actualIntervalChange) {\n          _this._actualIntervalChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryXAxis.prototype, \"actualMinorIntervalChange\", {\n    get: function () {\n      return this._actualMinorIntervalChange;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._actualMinorIntervalChange_wrapped !== null) {\n        this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinorIntervalChange_wrapped);\n        this._actualMinorIntervalChange_wrapped = null;\n        this._actualMinorIntervalChange = null;\n      }\n\n      this._actualMinorIntervalChange = ev;\n\n      this._actualMinorIntervalChange_wrapped = function (o, e) {\n        var ext = _this.actualMinorInterval;\n\n        if (_this.beforeActualMinorIntervalChange) {\n          _this.beforeActualMinorIntervalChange(_this, ext);\n        }\n\n        if (_this._actualMinorIntervalChange) {\n          _this._actualMinorIntervalChange(_this, ext);\n        }\n      };\n\n      this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinorIntervalChange_wrapped);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return IgrCategoryXAxis;\n}(IgrCategoryAxisBase);\n\nexport { IgrCategoryXAxis };","map":{"version":3,"sources":["../../../../src/igniteui-charts/lib/igr-category-x-axis.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { CategoryXAxis } from \"./CategoryXAxis\";\n/**\n * Represents a IgxDataChartComponent category X axis.\n*\n* `IgrCategoryXAxis` class represents a IgxDataChartComponent category X axis.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrLineSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\"/>\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrLineSeries({ name: \"Series1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrCategoryXAxis = /** @class */ /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgrCategoryXAxis, _super);\n    function IgrCategoryXAxis(props) {\n        var _this = _super.call(this, props) || this;\n        _this._actualIntervalChange = null;\n        _this._actualIntervalChange_wrapped = null;\n        _this._actualMinorIntervalChange = null;\n        _this._actualMinorIntervalChange_wrapped = null;\n        return _this;\n    }\n    IgrCategoryXAxis.prototype.createImplementation = function () {\n        return new CategoryXAxis();\n    };\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"interval\", {\n        /**\n         * Gets or sets the frequency of displayed labels.\n         * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.\n        *\n        * `interval` determines how often to show a label, tickmark, and/or gridline along the x-axis.  Set this property to _n_ to display a label every _nth_ item.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" interval=\"3\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrLineSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\"/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ld;\n        },\n        set: function (v) {\n            this.i.ld = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"actualInterval\", {\n        /**\n         * Gets the effective value for the current Interval.\n        *\n        * ```ts\n        * let effectiveInterval: number = xAxis.actualInterval;\n        * ```\n        */\n        get: function () {\n            return this.i.k8;\n        },\n        set: function (v) {\n            this.i.k8 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"minorInterval\", {\n        /**\n         * Gets or sets the frequency of displayed minor lines.\n         * The set value is a factor that determines how the minor lines will be displayed.\n        *\n        * `minorInterval` determines how often to show a minor gridline along the x-axis.  This property is relevant only when the displayed series is a type with grouping, like column series.\n        *\n        * `minorInterval` is expressed as a number between 0 and 1, representing the frequency of the interval.  To display minor gridlines representing 10ths of an item width, set `minorInterval` to 0.1.\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\"\n        * \t\tminorInterval={0.1}\n        * \t\tminorStroke=\"green\"\n        * \t\tminorStrokeThickness={1} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrLineSeries\n        * \t\tname=\"series1\"\n        * \t\txAxisName=\"xAxis\"\n        * \t\tyAxisName=\"yAxis\"\n        * \t\tvalueMemberPath=\"value\"/>\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.le;\n        },\n        set: function (v) {\n            this.i.le = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"actualMinorInterval\", {\n        /**\n         * Gets the effective value for the current MinorInterval.\n        *\n        * ```ts\n        * let effectiveMinorInterval: number = xAxis.actualMinorInterval;\n        * ```\n        */\n        get: function () {\n            return this.i.k9;\n        },\n        set: function (v) {\n            this.i.k9 = +v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Scrolls the specified item into view.\n    \r\n    * @param item  * Data item to scroll into view\n    */\n    IgrCategoryXAxis.prototype.scrollIntoView = function (item) {\n        this.i.ln(item);\n    };\n    IgrCategoryXAxis.prototype.scrollRangeIntoView = function (minimum, maximum) {\n        this.i.lo(minimum, maximum);\n    };\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"actualIntervalChange\", {\n        get: function () {\n            return this._actualIntervalChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualIntervalChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n                this._actualIntervalChange_wrapped = null;\n                this._actualIntervalChange = null;\n            }\n            this._actualIntervalChange = ev;\n            this._actualIntervalChange_wrapped = function (o, e) {\n                var ext = _this.actualInterval;\n                if (_this.beforeActualIntervalChange) {\n                    _this.beforeActualIntervalChange(_this, ext);\n                }\n                if (_this._actualIntervalChange) {\n                    _this._actualIntervalChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualIntervalChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryXAxis.prototype, \"actualMinorIntervalChange\", {\n        get: function () {\n            return this._actualMinorIntervalChange;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._actualMinorIntervalChange_wrapped !== null) {\n                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinorIntervalChange_wrapped);\n                this._actualMinorIntervalChange_wrapped = null;\n                this._actualMinorIntervalChange = null;\n            }\n            this._actualMinorIntervalChange = ev;\n            this._actualMinorIntervalChange_wrapped = function (o, e) {\n                var ext = _this.actualMinorInterval;\n                if (_this.beforeActualMinorIntervalChange) {\n                    _this.beforeActualMinorIntervalChange(_this, ext);\n                }\n                if (_this._actualMinorIntervalChange) {\n                    _this._actualMinorIntervalChange(_this, ext);\n                }\n            };\n            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinorIntervalChange_wrapped);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return IgrCategoryXAxis;\n}(IgrCategoryAxisBase));\nexport { IgrCategoryXAxis };\n//# sourceMappingURL=igr-category-x-axis.js.map\n"]},"metadata":{},"sourceType":"module"}